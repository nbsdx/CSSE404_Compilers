#############################################################################
# Makefile for building: bin/debug/Lexer
# Generated by qmake (3.0) (Qt 5.2.0)
# Project:  Lexer.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile Lexer.pro
#############################################################################

MAKEFILE      = Makefile

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT -fPIE $(DEFINES)
CXXFLAGS      = -pipe -std=c++0x -O2 -Wall -W -D_REENTRANT -fPIE $(DEFINES)
INCPATH       = -I. -I/usr/include/boost
LINK          = g++
LFLAGS        = -Wl,-O1 -Wl,-rpath,
LIBS          = $(SUBLIBS) -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = cp -f
COPY_DIR      = cp -f -R
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = bin/debug/.obj/

####### Files

SOURCES       = main.cpp \
		token.cpp \
		lexer.cpp 
OBJECTS       = bin/debug/.obj/main.o \
		bin/debug/.obj/token.o \
		bin/debug/.obj/lexer.o
DIST          = Lexer.pro
QMAKE_TARGET  = Lexer
DESTDIR       = bin/debug/#avoid trailing-slash linebreak
TARGET        = bin/debug/Lexer


first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	@test -d bin/debug/ || mkdir -p bin/debug/
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: Lexer.pro
	$(QMAKE) -o Makefile Lexer.pro
exer.pro:
qmake: FORCE
	@$(QMAKE) -o Makefile Lexer.pro

qmake_all: FORCE

dist: 
	@test -d bin/debug/.obj/Lexer1.0.0 || mkdir -p bin/debug/.obj/Lexer1.0.0
	$(COPY_FILE) --parents $(SOURCES) $(DIST) bin/debug/.obj/Lexer1.0.0/ && (cd `dirname bin/debug/.obj/Lexer1.0.0` && $(TAR) Lexer1.0.0.tar Lexer1.0.0 && $(COMPRESS) Lexer1.0.0.tar) && $(MOVE) `dirname bin/debug/.obj/Lexer1.0.0`/Lexer1.0.0.tar.gz . && $(DEL_FILE) -r bin/debug/.obj/Lexer1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

bin/debug/.obj/main.o: main.cpp lexer.h \
		lexer.hpp \
		token.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bin/debug/.obj/main.o main.cpp

bin/debug/.obj/token.o: token.cpp token.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bin/debug/.obj/token.o token.cpp

bin/debug/.obj/lexer.o: lexer.cpp lexer.h \
		lexer.hpp \
		token.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bin/debug/.obj/lexer.o lexer.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

